"""
Customer Management Screen for Streaming Service Management System
מסך ניהול לקוחות למערכת ניהול שירותי סטרימינג

Provides CRUD operations for Customer table
"""

import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime, date
from tkcalendar import DateEntry
import re

class CustomerManagement:
    """
    Customer management class for CRUD operations on Customer table
    """
    
    def __init__(self, parent_frame, db_manager, colors):
        """
        Initialize customer management
        
        Args:
            parent_frame: Parent frame for customer management
            db_manager: Database manager instance
            colors: Color scheme dictionary
        """
        self.parent_frame = parent_frame
        self.db_manager = db_manager
        self.colors = colors
        
        # Current data
        self.customers_data = []
        self.selected_customer = None
        self.search_var = tk.StringVar()
        self.search_var.trace('w', self.on_search_change)
        
        # Form variables
        self.form_vars = {}\n        \n        # Pagination\n        self.current_page = 1\n        self.items_per_page = 50\n        self.total_pages = 1\n    \n    def create_interface(self):\n        \"\"\"Create customer management interface\"\"\"\n        # Main container\n        main_container = ttk.Frame(self.parent_frame)\n        main_container.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)\n        \n        # Header\n        self.create_header(main_container)\n        \n        # Search and filters\n        self.create_search_section(main_container)\n        \n        # Main content area\n        content_frame = ttk.Frame(main_container)\n        content_frame.pack(fill=tk.BOTH, expand=True, pady=(10, 0))\n        \n        # Customer list (left side)\n        self.create_customer_list(content_frame)\n        \n        # Customer form (right side)\n        self.create_customer_form(content_frame)\n        \n        # Load initial data\n        self.refresh_customer_list()\n    \n    def create_header(self, parent):\n        \"\"\"Create header section\"\"\"\n        header_frame = ttk.Frame(parent)\n        header_frame.pack(fill=tk.X, pady=(0, 10))\n        \n        # Title\n        title_label = ttk.Label(header_frame,\n                               text=\"👥 Customer Management\",\n                               font=('Arial', 16, 'bold'),\n                               foreground=self.colors['primary'])\n        title_label.pack(side=tk.LEFT)\n        \n        # Action buttons\n        button_frame = ttk.Frame(header_frame)\n        button_frame.pack(side=tk.RIGHT)\n        \n        ttk.Button(button_frame,\n                  text=\"➕ New Customer\",\n                  command=self.new_customer,\n                  style='Primary.TButton').pack(side=tk.LEFT, padx=(0, 5))\n        \n        ttk.Button(button_frame,\n                  text=\"🔄 Refresh\",\n                  command=self.refresh_customer_list,\n                  style='Secondary.TButton').pack(side=tk.LEFT, padx=(0, 5))\n        \n        ttk.Button(button_frame,\n                  text=\"📊 Statistics\",\n                  command=self.show_customer_statistics,\n                  style='Secondary.TButton').pack(side=tk.LEFT)\n        \n        # Separator\n        separator = ttk.Separator(parent, orient='horizontal')\n        separator.pack(fill=tk.X, pady=(5, 0))\n    \n    def create_search_section(self, parent):\n        \"\"\"Create search and filter section\"\"\"\n        search_frame = ttk.Frame(parent)\n        search_frame.pack(fill=tk.X, pady=(10, 0))\n        \n        # Search box\n        ttk.Label(search_frame, text=\"🔍 Search:\").pack(side=tk.LEFT)\n        \n        search_entry = ttk.Entry(search_frame,\n                                textvariable=self.search_var,\n                                width=30)\n        search_entry.pack(side=tk.LEFT, padx=(5, 20))\n        \n        # Filter by subscription type\n        ttk.Label(search_frame, text=\"Subscription:\").pack(side=tk.LEFT)\n        \n        self.subscription_filter = ttk.Combobox(search_frame,\n                                               values=['All', 'Basic', 'Premium', 'Family', 'Student', 'Trial'],\n                                               state='readonly',\n                                               width=12)\n        self.subscription_filter.set('All')\n        self.subscription_filter.pack(side=tk.LEFT, padx=(5, 20))\n        self.subscription_filter.bind('<<ComboboxSelected>>', lambda e: self.refresh_customer_list())\n        \n        # Filter by payment status\n        ttk.Label(search_frame, text=\"Payment Status:\").pack(side=tk.LEFT)\n        \n        self.payment_filter = ttk.Combobox(search_frame,\n                                          values=['All', 'Current', 'Overdue', 'Suspended', 'Cancelled'],\n                                          state='readonly',\n                                          width=12)\n        self.payment_filter.set('All')\n        self.payment_filter.pack(side=tk.LEFT, padx=(5, 0))\n        self.payment_filter.bind('<<ComboboxSelected>>', lambda e: self.refresh_customer_list())\n    \n    def create_customer_list(self, parent):\n        \"\"\"Create customer list section\"\"\"\n        # Left frame for customer list\n        list_frame = ttk.LabelFrame(parent, text=\"Customer List\", padding=\"10\")\n        list_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 10))\n        \n        # Treeview for customers\n        columns = ('ID', 'Name', 'Email', 'Subscription', 'Status', 'Since')\n        self.customer_tree = ttk.Treeview(list_frame, columns=columns, show='headings', height=15)\n        \n        # Configure columns\n        self.customer_tree.heading('ID', text='ID')\n        self.customer_tree.heading('Name', text='Customer Name')\n        self.customer_tree.heading('Email', text='Email/User')\n        self.customer_tree.heading('Subscription', text='Subscription')\n        self.customer_tree.heading('Status', text='Payment Status')\n        self.customer_tree.heading('Since', text='Customer Since')\n        \n        self.customer_tree.column('ID', width=60, anchor=tk.CENTER)\n        self.customer_tree.column('Name', width=150, anchor=tk.W)\n        self.customer_tree.column('Email', width=120, anchor=tk.W)\n        self.customer_tree.column('Subscription', width=100, anchor=tk.CENTER)\n        self.customer_tree.column('Status', width=100, anchor=tk.CENTER)\n        self.customer_tree.column('Since', width=100, anchor=tk.CENTER)\n        \n        # Scrollbars\n        v_scrollbar = ttk.Scrollbar(list_frame, orient=\"vertical\", command=self.customer_tree.yview)\n        h_scrollbar = ttk.Scrollbar(list_frame, orient=\"horizontal\", command=self.customer_tree.xview)\n        self.customer_tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)\n        \n        # Pack treeview and scrollbars\n        self.customer_tree.grid(row=0, column=0, sticky=\"nsew\")\n        v_scrollbar.grid(row=0, column=1, sticky=\"ns\")\n        h_scrollbar.grid(row=1, column=0, sticky=\"ew\")\n        \n        # Configure grid weights\n        list_frame.grid_rowconfigure(0, weight=1)\n        list_frame.grid_columnconfigure(0, weight=1)\n        \n        # Bind selection event\n        self.customer_tree.bind('<<TreeviewSelect>>', self.on_customer_select)\n        \n        # Context menu\n        self.create_context_menu()\n        self.customer_tree.bind('<Button-3>', self.show_context_menu)\n        \n        # Pagination frame\n        pagination_frame = ttk.Frame(list_frame)\n        pagination_frame.grid(row=2, column=0, columnspan=2, sticky=\"ew\", pady=(10, 0))\n        \n        self.create_pagination_controls(pagination_frame)\n    \n    def create_context_menu(self):\n        \"\"\"Create context menu for customer list\"\"\"\n        self.context_menu = tk.Menu(self.customer_tree, tearoff=0)\n        self.context_menu.add_command(label=\"Edit Customer\", command=self.edit_selected_customer)\n        self.context_menu.add_command(label=\"View Profiles\", command=self.view_customer_profiles)\n        self.context_menu.add_command(label=\"View Payment History\", command=self.view_payment_history)\n        self.context_menu.add_separator()\n        self.context_menu.add_command(label=\"Delete Customer\", command=self.delete_selected_customer)\n    \n    def show_context_menu(self, event):\n        \"\"\"Show context menu\"\"\"\n        if self.customer_tree.selection():\n            self.context_menu.post(event.x_root, event.y_root)\n    \n    def create_pagination_controls(self, parent):\n        \"\"\"Create pagination controls\"\"\"\n        # Previous button\n        self.prev_btn = ttk.Button(parent,\n                                  text=\"◀ Previous\",\n                                  command=self.previous_page,\n                                  state=tk.DISABLED)\n        self.prev_btn.pack(side=tk.LEFT)\n        \n        # Page info\n        self.page_label = ttk.Label(parent, text=\"Page 1 of 1\")\n        self.page_label.pack(side=tk.LEFT, padx=(10, 10))\n        \n        # Next button\n        self.next_btn = ttk.Button(parent,\n                                  text=\"Next ▶\",\n                                  command=self.next_page,\n                                  state=tk.DISABLED)\n        self.next_btn.pack(side=tk.LEFT)\n        \n        # Items per page\n        ttk.Label(parent, text=\"Items per page:\").pack(side=tk.RIGHT, padx=(20, 5))\n        \n        items_combo = ttk.Combobox(parent,\n                                  values=[25, 50, 100, 200],\n                                  width=8,\n                                  state='readonly')\n        items_combo.set(self.items_per_page)\n        items_combo.pack(side=tk.RIGHT)\n        items_combo.bind('<<ComboboxSelected>>', self.on_items_per_page_change)\n    \n    def create_customer_form(self, parent):\n        \"\"\"Create customer form section\"\"\"\n        # Right frame for customer form\n        form_frame = ttk.LabelFrame(parent, text=\"Customer Details\", padding=\"15\")\n        form_frame.pack(side=tk.RIGHT, fill=tk.Y, ipadx=20)\n        \n        # Form fields\n        self.create_form_fields(form_frame)\n        \n        # Form buttons\n        self.create_form_buttons(form_frame)\n        \n        # Set initial state\n        self.set_form_state('view')\n    \n    def create_form_fields(self, parent):\n        \"\"\"Create form input fields\"\"\"\n        # Initialize form variables\n        self.form_vars = {\n            'customerID': tk.StringVar(),\n            'firstName': tk.StringVar(),\n            'lastName': tk.StringVar(),\n            'dateOfBirth': tk.StringVar(),\n            'customerSince': tk.StringVar(),\n            'subscription_type': tk.StringVar(),\n            'payment_status': tk.StringVar(),\n            'last_login_date': tk.StringVar()\n        }\n        \n        # Customer ID (readonly)\n        row = 0\n        ttk.Label(parent, text=\"Customer ID:\").grid(row=row, column=0, sticky=tk.W, pady=5)\n        self.id_entry = ttk.Entry(parent, textvariable=self.form_vars['customerID'], state='readonly', width=30)\n        self.id_entry.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))\n        \n        # First Name\n        row += 1\n        ttk.Label(parent, text=\"*First Name:\").grid(row=row, column=0, sticky=tk.W, pady=5)\n        self.firstname_entry = ttk.Entry(parent, textvariable=self.form_vars['firstName'], width=30)\n        self.firstname_entry.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))\n        \n        # Last Name\n        row += 1\n        ttk.Label(parent, text=\"*Last Name:\").grid(row=row, column=0, sticky=tk.W, pady=5)\n        self.lastname_entry = ttk.Entry(parent, textvariable=self.form_vars['lastName'], width=30)\n        self.lastname_entry.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))\n        \n        # Date of Birth\n        row += 1\n        ttk.Label(parent, text=\"*Date of Birth:\").grid(row=row, column=0, sticky=tk.W, pady=5)\n        self.dob_entry = DateEntry(parent, width=27, background='darkblue',\n                                  foreground='white', borderwidth=2, date_pattern='yyyy-mm-dd')\n        self.dob_entry.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))\n        \n        # Customer Since\n        row += 1\n        ttk.Label(parent, text=\"Customer Since:\").grid(row=row, column=0, sticky=tk.W, pady=5)\n        self.since_entry = DateEntry(parent, width=27, background='darkblue',\n                                    foreground='white', borderwidth=2, date_pattern='yyyy-mm-dd')\n        self.since_entry.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))\n        \n        # Subscription Type\n        row += 1\n        ttk.Label(parent, text=\"Subscription Type:\").grid(row=row, column=0, sticky=tk.W, pady=5)\n        self.subscription_combo = ttk.Combobox(parent,\n                                              textvariable=self.form_vars['subscription_type'],\n                                              values=['Basic', 'Premium', 'Family', 'Student', 'Trial'],\n                                              state='readonly',\n                                              width=27)\n        self.subscription_combo.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))\n        \n        # Payment Status\n        row += 1\n        ttk.Label(parent, text=\"Payment Status:\").grid(row=row, column=0, sticky=tk.W, pady=5)\n        self.payment_combo = ttk.Combobox(parent,\n                                         textvariable=self.form_vars['payment_status'],\n                                         values=['Current', 'Overdue', 'Suspended', 'Cancelled'],\n                                         state='readonly',\n                                         width=27)\n        self.payment_combo.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))\n        \n        # Last Login Date\n        row += 1\n        ttk.Label(parent, text=\"Last Login:\").grid(row=row, column=0, sticky=tk.W, pady=5)\n        self.login_entry = DateEntry(parent, width=27, background='darkblue',\n                                    foreground='white', borderwidth=2, date_pattern='yyyy-mm-dd')\n        self.login_entry.grid(row=row, column=1, sticky=tk.W, pady=5, padx=(10, 0))\n        \n        # Required fields note\n        row += 1\n        note_label = ttk.Label(parent, text=\"* Required fields\", font=('Arial', 8), foreground='red')\n        note_label.grid(row=row, column=0, columnspan=2, sticky=tk.W, pady=(10, 0))\n    \n    def create_form_buttons(self, parent):\n        \"\"\"Create form action buttons\"\"\"\n        button_frame = ttk.Frame(parent)\n        button_frame.grid(row=20, column=0, columnspan=2, pady=(20, 0), sticky=tk.W)\n        \n        # Save button\n        self.save_btn = ttk.Button(button_frame,\n                                  text=\"💾 Save\",\n                                  command=self.save_customer,\n                                  style='Primary.TButton')\n        self.save_btn.pack(side=tk.LEFT, padx=(0, 5))\n        \n        # Cancel button\n        self.cancel_btn = ttk.Button(button_frame,\n                                    text=\"❌ Cancel\",\n                                    command=self.cancel_edit,\n                                    style='Secondary.TButton')\n        self.cancel_btn.pack(side=tk.LEFT, padx=(0, 5))\n        \n        # Edit button\n        self.edit_btn = ttk.Button(button_frame,\n                                  text=\"✏️ Edit\",\n                                  command=self.edit_customer,\n                                  style='Secondary.TButton')\n        self.edit_btn.pack(side=tk.LEFT, padx=(0, 5))\n        \n        # Delete button\n        self.delete_btn = ttk.Button(button_frame,\n                                    text=\"🗑️ Delete\",\n                                    command=self.delete_customer,\n                                    style='Accent.TButton')\n        self.delete_btn.pack(side=tk.LEFT)\n    \n    def set_form_state(self, state):\n        \"\"\"Set form state (view, edit, new)\"\"\"\n        self.form_state = state\n        \n        if state == 'view':\n            # Disable all form fields\n            self.firstname_entry.config(state='readonly')\n            self.lastname_entry.config(state='readonly')\n            self.dob_entry.config(state='disabled')\n            self.since_entry.config(state='disabled')\n            self.subscription_combo.config(state='disabled')\n            self.payment_combo.config(state='disabled')\n            self.login_entry.config(state='disabled')\n            \n            # Show/hide buttons\n            self.save_btn.pack_forget()\n            self.cancel_btn.pack_forget()\n            self.edit_btn.pack(side=tk.LEFT, padx=(0, 5))\n            self.delete_btn.pack(side=tk.LEFT)\n            \n        elif state in ['edit', 'new']:\n            # Enable form fields\n            self.firstname_entry.config(state='normal')\n            self.lastname_entry.config(state='normal')\n            self.dob_entry.config(state='normal')\n            self.since_entry.config(state='normal')\n            self.subscription_combo.config(state='readonly')\n            self.payment_combo.config(state='readonly')\n            self.login_entry.config(state='normal')\n            \n            # Show/hide buttons\n            self.edit_btn.pack_forget()\n            self.delete_btn.pack_forget()\n            self.save_btn.pack(side=tk.LEFT, padx=(0, 5))\n            self.cancel_btn.pack(side=tk.LEFT, padx=(0, 5))\n    \n    def clear_form(self):\n        \"\"\"Clear all form fields\"\"\"\n        for var in self.form_vars.values():\n            var.set('')\n        \n        # Set default values for new customer\n        self.since_entry.set_date(date.today())\n        self.login_entry.set_date(date.today())\n        self.form_vars['subscription_type'].set('Basic')\n        self.form_vars['payment_status'].set('Current')\n    \n    def load_customer_to_form(self, customer):\n        \"\"\"Load customer data to form\"\"\"\n        self.form_vars['customerID'].set(str(customer['customerid']))\n        self.form_vars['firstName'].set(customer['firstname'] or '')\n        self.form_vars['lastName'].set(customer['lastname'] or '')\n        \n        # Handle dates\n        if customer['dateofbirth']:\n            self.dob_entry.set_date(customer['dateofbirth'])\n        \n        if customer['customersince']:\n            self.since_entry.set_date(customer['customersince'])\n        \n        if customer['last_login_date']:\n            self.login_entry.set_date(customer['last_login_date'])\n        \n        self.form_vars['subscription_type'].set(customer['subscription_type'] or 'Basic')\n        self.form_vars['payment_status'].set(customer['payment_status'] or 'Current')\n    \n    def validate_form(self):\n        \"\"\"Validate form data\"\"\"\n        errors = []\n        \n        # Required fields\n        if not self.form_vars['firstName'].get().strip():\n            errors.append(\"First name is required\")\n        \n        if not self.form_vars['lastName'].get().strip():\n            errors.append(\"Last name is required\")\n        \n        # Date validation\n        try:\n            dob = self.dob_entry.get_date()\n            if dob >= date.today():\n                errors.append(\"Date of birth must be in the past\")\n        except:\n            errors.append(\"Invalid date of birth\")\n        \n        # Name validation (only letters and spaces)\n        if not re.match(r'^[a-zA-Z\\s]+$', self.form_vars['firstName'].get().strip()):\n            errors.append(\"First name should contain only letters and spaces\")\n        \n        if not re.match(r'^[a-zA-Z\\s]+$', self.form_vars['lastName'].get().strip()):\n            errors.append(\"Last name should contain only letters and spaces\")\n        \n        return errors\n    \n    def refresh_customer_list(self):\n        \"\"\"Refresh customer list from database\"\"\"\n        try:\n            # Build search filters\n            search_term = self.search_var.get().strip()\n            subscription_filter = self.subscription_filter.get()\n            payment_filter = self.payment_filter.get()\n            \n            # Calculate offset\n            offset = (self.current_page - 1) * self.items_per_page\n            \n            # Get customers\n            self.customers_data = self.get_filtered_customers(\n                search_term, subscription_filter, payment_filter, \n                limit=self.items_per_page, offset=offset\n            )\n            \n            # Update treeview\n            self.update_customer_tree()\n            \n            # Update pagination\n            self.update_pagination()\n            \n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"Failed to load customers: {str(e)}\")\n    \n    def get_filtered_customers(self, search_term, subscription_filter, payment_filter, limit=None, offset=None):\n        \"\"\"Get filtered customers from database\"\"\"\n        query = \"\"\"\n            SELECT customerID, firstName, lastName, dateOfBirth, customerSince,\n                   subscription_type, payment_status, last_login_date\n            FROM Customer\n            WHERE 1=1\n        \"\"\"\n        \n        params = []\n        \n        # Add search filter\n        if search_term:\n            query += \" AND (firstName ILIKE %s OR lastName ILIKE %s OR CAST(customerID AS TEXT) LIKE %s)\"\n            search_pattern = f\"%{search_term}%\"\n            params.extend([search_pattern, search_pattern, search_pattern])\n        \n        # Add subscription filter\n        if subscription_filter and subscription_filter != 'All':\n            query += \" AND subscription_type = %s\"\n            params.append(subscription_filter)\n        \n        # Add payment filter\n        if payment_filter and payment_filter != 'All':\n            query += \" AND payment_status = %s\"\n            params.append(payment_filter)\n        \n        query += \" ORDER BY customerID\"\n        \n        # Add pagination\n        if limit:\n            query += \" LIMIT %s\"\n            params.append(limit)\n        \n        if offset:\n            query += \" OFFSET %s\"\n            params.append(offset)\n        \n        return self.db_manager.execute_query(query, params) or []\n    \n    def update_customer_tree(self):\n        \"\"\"Update customer treeview with current data\"\"\"\n        # Clear existing items\n        for item in self.customer_tree.get_children():\n            self.customer_tree.delete(item)\n        \n        # Add customers to tree\n        for customer in self.customers_data:\n            # Format name\n            full_name = f\"{customer['firstname']} {customer['lastname']}\"\n            \n            # Format date\n            since_date = customer['customersince'].strftime('%Y-%m-%d') if customer['customersince'] else 'N/A'\n            \n            # Create email placeholder (since we don't have email field)\n            email_placeholder = f\"{customer['firstname'].lower()}.{customer['lastname'].lower()}@email.com\"\n            \n            values = (\n                customer['customerid'],\n                full_name,\n                email_placeholder,\n                customer['subscription_type'] or 'Basic',\n                customer['payment_status'] or 'Current',\n                since_date\n            )\n            \n            self.customer_tree.insert('', 'end', values=values)\n    \n    def update_pagination(self):\n        \"\"\"Update pagination controls\"\"\"\n        # Calculate total pages (approximate)\n        total_customers = self.get_total_customers_count()\n        self.total_pages = max(1, (total_customers + self.items_per_page - 1) // self.items_per_page)\n        \n        # Update page label\n        self.page_label.config(text=f\"Page {self.current_page} of {self.total_pages}\")\n        \n        # Update button states\n        self.prev_btn.config(state=tk.NORMAL if self.current_page > 1 else tk.DISABLED)\n        self.next_btn.config(state=tk.NORMAL if self.current_page < self.total_pages else tk.DISABLED)\n    \n    def get_total_customers_count(self):\n        \"\"\"Get total count of customers with current filters\"\"\"\n        try:\n            search_term = self.search_var.get().strip()\n            subscription_filter = self.subscription_filter.get()\n            payment_filter = self.payment_filter.get()\n            \n            query = \"SELECT COUNT(*) FROM Customer WHERE 1=1\"\n            params = []\n            \n            # Add filters\n            if search_term:\n                query += \" AND (firstName ILIKE %s OR lastName ILIKE %s OR CAST(customerID AS TEXT) LIKE %s)\"\n                search_pattern = f\"%{search_term}%\"\n                params.extend([search_pattern, search_pattern, search_pattern])\n            \n            if subscription_filter and subscription_filter != 'All':\n                query += \" AND subscription_type = %s\"\n                params.append(subscription_filter)\n            \n            if payment_filter and payment_filter != 'All':\n                query += \" AND payment_status = %s\"\n                params.append(payment_filter)\n            \n            result = self.db_manager.execute_query(query, params)\n            return result[0][0] if result else 0\n            \n        except Exception as e:\n            print(f\"Error getting customer count: {str(e)}\")\n            return 0\n    \n    # Event handlers\n    def on_search_change(self, *args):\n        \"\"\"Handle search text change\"\"\"\n        # Reset to first page when searching\n        self.current_page = 1\n        self.refresh_customer_list()\n    \n    def on_customer_select(self, event):\n        \"\"\"Handle customer selection in tree\"\"\"\n        selection = self.customer_tree.selection()\n        if selection:\n            item = self.customer_tree.item(selection[0])\n            customer_id = item['values'][0]\n            \n            # Find customer in current data\n            self.selected_customer = None\n            for customer in self.customers_data:\n                if customer['customerid'] == customer_id:\n                    self.selected_customer = customer\n                    break\n            \n            if self.selected_customer:\n                self.load_customer_to_form(self.selected_customer)\n                self.set_form_state('view')\n    \n    def on_items_per_page_change(self, event):\n        \"\"\"Handle items per page change\"\"\"\n        self.items_per_page = int(event.widget.get())\n        self.current_page = 1\n        self.refresh_customer_list()\n    \n    # Navigation methods\n    def previous_page(self):\n        \"\"\"Go to previous page\"\"\"\n        if self.current_page > 1:\n            self.current_page -= 1\n            self.refresh_customer_list()\n    \n    def next_page(self):\n        \"\"\"Go to next page\"\"\"\n        if self.current_page < self.total_pages:\n            self.current_page += 1\n            self.refresh_customer_list()\n    \n    # CRUD operations\n    def new_customer(self):\n        \"\"\"Start creating new customer\"\"\"\n        self.selected_customer = None\n        self.clear_form()\n        \n        # Set new customer ID\n        next_id = self.db_manager.get_next_id('Customer', 'customerID')\n        self.form_vars['customerID'].set(str(next_id))\n        \n        self.set_form_state('new')\n        self.firstname_entry.focus()\n    \n    def edit_customer(self):\n        \"\"\"Start editing selected customer\"\"\"\n        if not self.selected_customer:\n            messagebox.showwarning(\"Warning\", \"Please select a customer to edit\")\n            return\n        \n        self.set_form_state('edit')\n        self.firstname_entry.focus()\n    \n    def save_customer(self):\n        \"\"\"Save customer (create or update)\"\"\"\n        # Validate form\n        errors = self.validate_form()\n        if errors:\n            messagebox.showerror(\"Validation Error\", \"\\n\".join(errors))\n            return\n        \n        try:\n            # Prepare customer data\n            customer_data = {\n                'firstName': self.form_vars['firstName'].get().strip(),\n                'lastName': self.form_vars['lastName'].get().strip(),\n                'dateOfBirth': self.dob_entry.get_date(),\n                'customerSince': self.since_entry.get_date(),\n                'subscription_type': self.form_vars['subscription_type'].get(),\n                'payment_status': self.form_vars['payment_status'].get(),\n                'last_login_date': self.login_entry.get_date()\n            }\n            \n            if self.form_state == 'new':\n                # Create new customer\n                customer_data['customerID'] = int(self.form_vars['customerID'].get())\n                result = self.db_manager.create_customer(customer_data)\n                \n                if result:\n                    messagebox.showinfo(\"Success\", \"Customer created successfully!\")\n                    self.refresh_customer_list()\n                    self.set_form_state('view')\n                else:\n                    messagebox.showerror(\"Error\", \"Failed to create customer\")\n                    \n            elif self.form_state == 'edit':\n                # Update existing customer\n                customer_id = int(self.form_vars['customerID'].get())\n                result = self.db_manager.update_customer(customer_id, customer_data)\n                \n                if result:\n                    messagebox.showinfo(\"Success\", \"Customer updated successfully!\")\n                    self.refresh_customer_list()\n                    self.set_form_state('view')\n                else:\n                    messagebox.showerror(\"Error\", \"Failed to update customer\")\n                    \n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"Failed to save customer: {str(e)}\")\n    \n    def cancel_edit(self):\n        \"\"\"Cancel editing\"\"\"\n        if self.selected_customer:\n            self.load_customer_to_form(self.selected_customer)\n            self.set_form_state('view')\n        else:\n            self.clear_form()\n            self.set_form_state('view')\n    \n    def delete_customer(self):\n        \"\"\"Delete selected customer\"\"\"\n        if not self.selected_customer:\n            messagebox.showwarning(\"Warning\", \"Please select a customer to delete\")\n            return\n        \n        customer_name = f\"{self.selected_customer['firstname']} {self.selected_customer['lastname']}\"\n        \n        if messagebox.askyesno(\"Confirm Delete\", \n                              f\"Are you sure you want to delete customer '{customer_name}'?\\n\\n\"\n                              \"This will also delete all associated profiles and data.\"):\n            try:\n                customer_id = self.selected_customer['customerid']\n                result = self.db_manager.delete_customer(customer_id)\n                \n                if result:\n                    messagebox.showinfo(\"Success\", \"Customer deleted successfully!\")\n                    self.clear_form()\n                    self.selected_customer = None\n                    self.refresh_customer_list()\n                    self.set_form_state('view')\n                else:\n                    messagebox.showerror(\"Error\", \"Failed to delete customer\")\n                    \n            except Exception as e:\n                messagebox.showerror(\"Error\", f\"Failed to delete customer: {str(e)}\")\n    \n    # Context menu actions\n    def edit_selected_customer(self):\n        \"\"\"Edit customer from context menu\"\"\"\n        self.edit_customer()\n    \n    def delete_selected_customer(self):\n        \"\"\"Delete customer from context menu\"\"\"\n        self.delete_customer()\n    \n    def view_customer_profiles(self):\n        \"\"\"View customer profiles\"\"\"\n        if not self.selected_customer:\n            messagebox.showwarning(\"Warning\", \"Please select a customer\")\n            return\n        \n        # This would navigate to profile management with customer filter\n        messagebox.showinfo(\"Info\", \"Navigate to Profile Management to view customer profiles\")\n    \n    def view_payment_history(self):\n        \"\"\"View customer payment history\"\"\"\n        if not self.selected_customer:\n            messagebox.showwarning(\"Warning\", \"Please select a customer\")\n            return\n        \n        # Show payment history in a popup\n        self.show_payment_history_popup()\n    \n    def show_payment_history_popup(self):\n        \"\"\"Show payment history in popup window\"\"\"\n        try:\n            customer_id = self.selected_customer['customerid']\n            \n            # Get payment history\n            query = \"\"\"\n                SELECT paymentID, paymentDate, amount, currency, \n                       paymentMethod, status\n                FROM Payment \n                WHERE customerID = %s \n                ORDER BY paymentDate DESC\n            \"\"\"\n            \n            payments = self.db_manager.execute_query(query, (customer_id,))\n            \n            # Create popup window\n            popup = tk.Toplevel()\n            popup.title(f\"Payment History - {self.selected_customer['firstname']} {self.selected_customer['lastname']}\")\n            popup.geometry(\"600x400\")\n            popup.transient(self.parent_frame)\n            \n            # Create treeview for payments\n            columns = ('ID', 'Date', 'Amount', 'Currency', 'Method', 'Status')\n            payment_tree = ttk.Treeview(popup, columns=columns, show='headings')\n            \n            # Configure columns\n            for col in columns:\n                payment_tree.heading(col, text=col)\n                payment_tree.column(col, width=100, anchor=tk.CENTER)\n            \n            # Add payments\n            for payment in payments or []:\n                payment_tree.insert('', 'end', values=(\n                    payment['paymentid'],\n                    payment['paymentdate'].strftime('%Y-%m-%d') if payment['paymentdate'] else 'N/A',\n                    f\"{payment['amount']:.2f}\" if payment['amount'] else '0.00',\n                    payment['currency'] or 'USD',\n                    payment['paymentmethod'] or 'N/A',\n                    payment['status'] or 'Unknown'\n                ))\n            \n            # Scrollbar\n            scrollbar = ttk.Scrollbar(popup, orient=\"vertical\", command=payment_tree.yview)\n            payment_tree.configure(yscrollcommand=scrollbar.set)\n            \n            # Pack widgets\n            payment_tree.pack(side=\"left\", fill=\"both\", expand=True, padx=10, pady=10)\n            scrollbar.pack(side=\"right\", fill=\"y\", pady=10)\n            \n            # Close button\n            ttk.Button(popup, text=\"Close\", command=popup.destroy).pack(pady=5)\n            \n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"Failed to load payment history: {str(e)}\")\n    \n    def show_customer_statistics(self):\n        \"\"\"Show customer statistics\"\"\"\n        try:\n            # Get statistics\n            stats_query = \"\"\"\n                SELECT \n                    COUNT(*) as total_customers,\n                    COUNT(CASE WHEN subscription_type = 'Premium' THEN 1 END) as premium_customers,\n                    COUNT(CASE WHEN payment_status = 'Current' THEN 1 END) as current_payments,\n                    AVG(EXTRACT(YEAR FROM AGE(dateOfBirth))) as avg_age\n                FROM Customer\n            \"\"\"\n            \n            stats = self.db_manager.execute_query(stats_query)\n            \n            if stats:\n                stat = stats[0]\n                stats_text = f\"\"\"\nCustomer Statistics:\n\nTotal Customers: {stat[0]}\nPremium Customers: {stat[1]}\nCurrent Payments: {stat[2]}\nAverage Age: {stat[3]:.1f} years\n                \"\"\"\n                \n                messagebox.showinfo(\"Customer Statistics\", stats_text.strip())\n            \n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"Failed to load statistics: {str(e)}\")
